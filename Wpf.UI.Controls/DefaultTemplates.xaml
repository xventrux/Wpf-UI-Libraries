<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:local="clr-namespace:Wpf.UI.Controls"
                    xmlns:converters="clr-namespace:Wpf.UI.Controls.Converters"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <FontFamily x:Key="Icons">/Resourses/Fonts/#Material Design Icons</FontFamily>
    
    <!--Triggers-->

    <Trigger x:Key="SwitchIsMouseOver" Property="local:Switch.IsMouseOver" Value="True">
        <Setter Property="local:Switch.Cursor" Value="Hand"/>
    </Trigger>
    
    <Trigger x:Key="SwitchIsChecked" Property="local:Switch.IsChecked" Value="False">
        <Setter Property="local:Switch.EllipseOffset" Value="14"/>
        <Trigger.EnterActions>
            <BeginStoryboard>
                <Storyboard TargetProperty="(local:Switch.EllipseOffset)" >
                    <DoubleAnimation From="0" To="14" Duration="0:0:0.09" />
                </Storyboard>
            </BeginStoryboard>
        </Trigger.EnterActions>
        <Trigger.ExitActions>
            <BeginStoryboard>
                <Storyboard TargetProperty="(local:Switch.EllipseOffset)" >
                    <DoubleAnimation To="0" Duration="0:0:0.09" />
                </Storyboard>
            </BeginStoryboard>
        </Trigger.ExitActions>
    </Trigger>

    <!--Switch-->

    <ControlTemplate x:Key="DefaultSwitchTemplate" TargetType="{x:Type local:Switch}">
        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CornerRadius="5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter Margin="0 0 10 0"/>

                <local:SpacingStackPanel Grid.Column="1" ItemSpacing="5" Orientation="Horizontal">
                    <local:Icon Foreground="{TemplateBinding Foreground}" Value="{TemplateBinding OffIcon}"
                                Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Value, Converter={x:Static converters:StringToVisibilityConverter.Instance}}"
                                VerticalAlignment="Center"/>
                    <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding OffText}"
                               Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Converter={x:Static converters:StringToVisibilityConverter.Instance}}"
                               VerticalAlignment="Center"/>
                    <Border Background="{TemplateBinding Fill}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Width="30"
                            Padding="2"
                            CornerRadius="2">
                        <Canvas>
                            <Border Canvas.Right="{TemplateBinding EllipseOffset}"
                                    Width="{TemplateBinding EllipseHeight}" Height="{TemplateBinding EllipseHeight}" Background="White" CornerRadius="2"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"/>
                        </Canvas>

                    </Border>
                    <local:Icon Foreground="{TemplateBinding Foreground}" 
                                Value="{TemplateBinding OnIcon}" 
                                Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Value, Converter={x:Static converters:StringToVisibilityConverter.Instance}}"
                                VerticalAlignment="Center"/>
                    <TextBlock Text="{TemplateBinding OnText}" VerticalAlignment="Center"/>
                </local:SpacingStackPanel>
            </Grid>
        </Border>
        

        <ControlTemplate.Triggers>
            <StaticResource ResourceKey="SwitchIsChecked"/>
            <StaticResource ResourceKey="SwitchIsMouseOver"/>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="DefaultRoundedSwitchTemplate" TargetType="{x:Type local:Switch}">
        <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" CornerRadius="5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ContentPresenter Margin="0 0 10 0"/>

                <local:SpacingStackPanel Grid.Column="1" ItemSpacing="5" Orientation="Horizontal">
                    <local:Icon Foreground="{TemplateBinding Foreground}" 
                                Value="{TemplateBinding OffIcon}" 
                                Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Value, Converter={x:Static converters:StringToVisibilityConverter.Instance}}"
                                VerticalAlignment="Center"/>
                    <TextBlock Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding OffText}" 
                               Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Converter={x:Static converters:StringToVisibilityConverter.Instance}}"
                               VerticalAlignment="Center"/>
                    <Border Background="{TemplateBinding Fill}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Width="30"
                            Padding="2"
                            CornerRadius="8">
                        <Canvas>
                            <Ellipse Canvas.Right="{TemplateBinding EllipseOffset}"
                                     Width="{TemplateBinding EllipseHeight}" Height="{TemplateBinding EllipseHeight}" Fill="White"
                                     StrokeThickness="{TemplateBinding BorderThickness, Converter={x:Static converters:ThicknessToDoubleConverter.Instance}}"
                                     Stroke="{TemplateBinding BorderBrush}"/>
                        </Canvas>

                    </Border>
                    <local:Icon Foreground="{TemplateBinding Foreground}" 
                                Value="{TemplateBinding OnIcon}" 
                                Visibility="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Value, Converter={x:Static converters:StringToVisibilityConverter.Instance}}"
                                VerticalAlignment="Center"/>
                    <TextBlock Text="{TemplateBinding OnText}" VerticalAlignment="Center"/>
                </local:SpacingStackPanel>
            </Grid>
        </Border>
        

        <ControlTemplate.Triggers>
            <StaticResource ResourceKey="SwitchIsChecked"/>
            <StaticResource ResourceKey="SwitchIsMouseOver"/>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--IconButton-->

    <ControlTemplate x:Key="DefaultIconButtonTemplate" TargetType="{x:Type local:IconButton}">
        <Border Padding="{TemplateBinding Padding}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                CornerRadius="5"
                BorderThickness="{TemplateBinding BorderThickness}">
            <local:SpacingStackPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal" ItemSpacing="5">
                <local:Icon Value="{TemplateBinding Icon}" VerticalAlignment="Center"/>
                <ContentPresenter/>
            </local:SpacingStackPanel>

        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </ControlTemplate.Triggers>
        
    </ControlTemplate>

    <!--Icon-->
    
    <ControlTemplate x:Key="DefaultIconTemplate" TargetType="{x:Type local:Icon}">
        <TextBlock FontFamily="{DynamicResource Icons}" Text="{TemplateBinding Value}"/>
    </ControlTemplate>

</ResourceDictionary>